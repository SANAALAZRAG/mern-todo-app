{"ast":null,"code":"var _jsxFileName = \"D:\\\\mern-todo-app\\\\frontend\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Vérifier si l'utilisateur a déjà choisi un thème\n  const storedTheme = localStorage.getItem('theme');\n  const [isDarkMode, setIsDarkMode] = useState(storedTheme === 'dark');\n\n  // Fonction pour basculer le mode sombre\n  const toggleDarkMode = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n\n  // Mettre à jour les classes CSS et le localStorage lorsque le mode change\n  useEffect(() => {\n    if (isDarkMode) {\n      document.body.classList.add('dark-mode');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.body.classList.remove('dark-mode');\n      localStorage.setItem('theme', 'light');\n    }\n  }, [isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleDarkMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"XeatsL+WTbj0BQ8d/k2ESH8RkIc=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","storedTheme","localStorage","getItem","isDarkMode","setIsDarkMode","toggleDarkMode","prevMode","document","body","classList","add","setItem","remove","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/mern-todo-app/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Vérifier si l'utilisateur a déjà choisi un thème\r\n  const storedTheme = localStorage.getItem('theme');\r\n  const [isDarkMode, setIsDarkMode] = useState(storedTheme === 'dark');\r\n\r\n  // Fonction pour basculer le mode sombre\r\n  const toggleDarkMode = () => {\r\n    setIsDarkMode(prevMode => !prevMode);\r\n  };\r\n\r\n  // Mettre à jour les classes CSS et le localStorage lorsque le mode change\r\n  useEffect(() => {\r\n    if (isDarkMode) {\r\n      document.body.classList.add('dark-mode');\r\n      localStorage.setItem('theme', 'dark');\r\n    } else {\r\n      document.body.classList.remove('dark-mode');\r\n      localStorage.setItem('theme', 'light');\r\n    }\r\n  }, [isDarkMode]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDarkMode, toggleDarkMode }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACjD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAACQ,WAAW,KAAK,MAAM,CAAC;;EAEpE;EACA,MAAMK,cAAc,GAAGA,CAAA,KAAM;IAC3BD,aAAa,CAACE,QAAQ,IAAI,CAACA,QAAQ,CAAC;EACtC,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACd,IAAIU,UAAU,EAAE;MACdI,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;MACxCT,YAAY,CAACU,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC;IACvC,CAAC,MAAM;MACLJ,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACG,MAAM,CAAC,WAAW,CAAC;MAC3CX,YAAY,CAACU,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC;IACxC;EACF,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;EAEhB,oBACER,OAAA,CAACC,YAAY,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEX,UAAU;MAAEE;IAAe,CAAE;IAAAP,QAAA,EAC1DA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACnB,EAAA,CA1BWF,aAAa;AAAAsB,EAAA,GAAbtB,aAAa;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}